{
  "{\"sourceRoot\":\"/Users/alexglaze/git/node_fun/root-trips\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexglaze/git/node_fun/root-trips\",\"filename\":\"/Users/alexglaze/git/node_fun/root-trips/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexglaze/git/node_fun/root-trips\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexglaze/git/node_fun/root-trips",
      "filename": "/Users/alexglaze/git/node_fun/root-trips/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexglaze/git/node_fun/root-trips",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexglaze/git/node_fun/root-trips/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexglaze/git/node_fun/root-trips/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar program = require(\"commander\");\n\nvar chalk = require(\"chalk\");\n\nvar csv = require(\"csv\");\n\nvar _ = require(\"lodash\");\n\nvar fs = require(\"fs\");\n\nvar helpers = require(\"./helpers\");\n\nvar file = process.argv[2];\nprogram.version(\"0.0.1\").option(\"-l, --list [list]\", \"list of drivers/trips in txt file\").parse(process.argv);\n\nfunction run() {\n  var drivers = [];\n  var trips = [];\n  var parse = csv.parse;\n  var stream = fs.createReadStream(file).pipe(parse({\n    delimiter: \"\\n\"\n  }));\n  stream.on(\"data\", function (data) {\n    var line = data[0];\n    var wordArray = line.split(\" \");\n\n    if (wordArray[0] === \"Driver\") {\n      var driver = helpers.createDriver(wordArray);\n      drivers.push(driver);\n      console.log(chalk.magenta(\"we have a new driver => \", JSON.stringify(driver, null, 4)));\n    } else if (wordArray[0] === \"Trip\") {\n      var trip = helpers.createTrip(wordArray, drivers);\n      trips.push(trip);\n      console.log(chalk.magenta(\"we have a new trip => \", JSON.stringify(trip, null, 4)));\n    } else {\n      console.error(chalk.red(\"unknown error\"));\n    }\n  });\n  stream.on(\"error\", function (error) {\n    console.error(chalk.red(\"There was an error reading the file => \", error));\n  });\n  stream.on(\"end\", function () {\n    var driverReportMap = helpers.buildDriverReportMap(trips);\n    helpers.writeResultFile(driverReportMap, drivers);\n  });\n}\n\nrun();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInByb2dyYW0iLCJyZXF1aXJlIiwiY2hhbGsiLCJjc3YiLCJfIiwiZnMiLCJoZWxwZXJzIiwiZmlsZSIsInByb2Nlc3MiLCJhcmd2IiwidmVyc2lvbiIsIm9wdGlvbiIsInBhcnNlIiwicnVuIiwiZHJpdmVycyIsInRyaXBzIiwic3RyZWFtIiwiY3JlYXRlUmVhZFN0cmVhbSIsInBpcGUiLCJkZWxpbWl0ZXIiLCJvbiIsImRhdGEiLCJsaW5lIiwid29yZEFycmF5Iiwic3BsaXQiLCJkcml2ZXIiLCJjcmVhdGVEcml2ZXIiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsIm1hZ2VudGEiLCJKU09OIiwic3RyaW5naWZ5IiwidHJpcCIsImNyZWF0ZVRyaXAiLCJlcnJvciIsInJlZCIsImRyaXZlclJlcG9ydE1hcCIsImJ1aWxkRHJpdmVyUmVwb3J0TWFwIiwid3JpdGVSZXN1bHRGaWxlIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsSUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxJQUFNRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLElBQU1HLENBQUMsR0FBR0gsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBRUEsSUFBTUksRUFBRSxHQUFHSixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFFQSxJQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLElBQU1NLElBQUksR0FBR0MsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYixDQUFiO0FBRUFULE9BQU8sQ0FDSlUsT0FESCxDQUNXLE9BRFgsRUFFR0MsTUFGSCxDQUVVLG1CQUZWLEVBRStCLG1DQUYvQixFQUdHQyxLQUhILENBR1NKLE9BQU8sQ0FBQ0MsSUFIakI7O0FBS0EsU0FBU0ksR0FBVCxHQUFlO0FBQ2IsTUFBTUMsT0FBTyxHQUFHLEVBQWhCO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLEVBQWQ7QUFFQSxNQUFJSCxLQUFLLEdBQUdULEdBQUcsQ0FBQ1MsS0FBaEI7QUFDQSxNQUFJSSxNQUFNLEdBQUdYLEVBQUUsQ0FBQ1ksZ0JBQUgsQ0FBb0JWLElBQXBCLEVBQTBCVyxJQUExQixDQUErQk4sS0FBSyxDQUFDO0FBQUVPLElBQUFBLFNBQVMsRUFBRTtBQUFiLEdBQUQsQ0FBcEMsQ0FBYjtBQUVBSCxFQUFBQSxNQUFNLENBQUNJLEVBQVAsQ0FBVSxNQUFWLEVBQWtCLFVBQVNDLElBQVQsRUFBZTtBQUMvQixRQUFJQyxJQUFJLEdBQUdELElBQUksQ0FBQyxDQUFELENBQWY7QUFDQSxRQUFJRSxTQUFTLEdBQUdELElBQUksQ0FBQ0UsS0FBTCxDQUFXLEdBQVgsQ0FBaEI7O0FBQ0EsUUFBSUQsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQixRQUFyQixFQUErQjtBQUM3QixVQUFNRSxNQUFNLEdBQUduQixPQUFPLENBQUNvQixZQUFSLENBQXFCSCxTQUFyQixDQUFmO0FBQ0FULE1BQUFBLE9BQU8sQ0FBQ2EsSUFBUixDQUFhRixNQUFiO0FBQ0FHLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNFM0IsS0FBSyxDQUFDNEIsT0FBTixDQUNFLDBCQURGLEVBRUVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlUCxNQUFmLEVBQXVCLElBQXZCLEVBQTZCLENBQTdCLENBRkYsQ0FERjtBQU1ELEtBVEQsTUFTTyxJQUFJRixTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCLE1BQXJCLEVBQTZCO0FBQ2xDLFVBQU1VLElBQUksR0FBRzNCLE9BQU8sQ0FBQzRCLFVBQVIsQ0FBbUJYLFNBQW5CLEVBQThCVCxPQUE5QixDQUFiO0FBQ0FDLE1BQUFBLEtBQUssQ0FBQ1ksSUFBTixDQUFXTSxJQUFYO0FBQ0FMLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNFM0IsS0FBSyxDQUFDNEIsT0FBTixDQUFjLHdCQUFkLEVBQXdDQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUMsSUFBZixFQUFxQixJQUFyQixFQUEyQixDQUEzQixDQUF4QyxDQURGO0FBR0QsS0FOTSxNQU1BO0FBQ0xMLE1BQUFBLE9BQU8sQ0FBQ08sS0FBUixDQUFjakMsS0FBSyxDQUFDa0MsR0FBTixDQUFVLGVBQVYsQ0FBZDtBQUNEO0FBQ0YsR0FyQkQ7QUF1QkFwQixFQUFBQSxNQUFNLENBQUNJLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLFVBQVNlLEtBQVQsRUFBZ0I7QUFDakNQLElBQUFBLE9BQU8sQ0FBQ08sS0FBUixDQUFjakMsS0FBSyxDQUFDa0MsR0FBTixDQUFVLHlDQUFWLEVBQXFERCxLQUFyRCxDQUFkO0FBQ0QsR0FGRDtBQUlBbkIsRUFBQUEsTUFBTSxDQUFDSSxFQUFQLENBQVUsS0FBVixFQUFpQixZQUFXO0FBQzFCLFFBQU1pQixlQUFlLEdBQUcvQixPQUFPLENBQUNnQyxvQkFBUixDQUE2QnZCLEtBQTdCLENBQXhCO0FBQ0FULElBQUFBLE9BQU8sQ0FBQ2lDLGVBQVIsQ0FBd0JGLGVBQXhCLEVBQXlDdkIsT0FBekM7QUFDRCxHQUhEO0FBSUQ7O0FBRURELEdBQUciLCJzb3VyY2VSb290IjoiL1VzZXJzL2FsZXhnbGF6ZS9naXQvbm9kZV9mdW4vcm9vdC10cmlwcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByb2dyYW0gPSByZXF1aXJlKFwiY29tbWFuZGVyXCIpO1xuY29uc3QgY2hhbGsgPSByZXF1aXJlKFwiY2hhbGtcIik7XG5jb25zdCBjc3YgPSByZXF1aXJlKFwiY3N2XCIpO1xuY29uc3QgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuXG5jb25zdCBoZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbmNvbnN0IGZpbGUgPSBwcm9jZXNzLmFyZ3ZbMl07XG5cbnByb2dyYW1cbiAgLnZlcnNpb24oXCIwLjAuMVwiKVxuICAub3B0aW9uKFwiLWwsIC0tbGlzdCBbbGlzdF1cIiwgXCJsaXN0IG9mIGRyaXZlcnMvdHJpcHMgaW4gdHh0IGZpbGVcIilcbiAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbmZ1bmN0aW9uIHJ1bigpIHtcbiAgY29uc3QgZHJpdmVycyA9IFtdO1xuICBjb25zdCB0cmlwcyA9IFtdO1xuXG4gIGxldCBwYXJzZSA9IGNzdi5wYXJzZTtcbiAgbGV0IHN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZSkucGlwZShwYXJzZSh7IGRlbGltaXRlcjogXCJcXG5cIiB9KSk7XG5cbiAgc3RyZWFtLm9uKFwiZGF0YVwiLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgbGV0IGxpbmUgPSBkYXRhWzBdO1xuICAgIGxldCB3b3JkQXJyYXkgPSBsaW5lLnNwbGl0KFwiIFwiKTtcbiAgICBpZiAod29yZEFycmF5WzBdID09PSBcIkRyaXZlclwiKSB7XG4gICAgICBjb25zdCBkcml2ZXIgPSBoZWxwZXJzLmNyZWF0ZURyaXZlcih3b3JkQXJyYXkpO1xuICAgICAgZHJpdmVycy5wdXNoKGRyaXZlcik7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgY2hhbGsubWFnZW50YShcbiAgICAgICAgICBcIndlIGhhdmUgYSBuZXcgZHJpdmVyID0+IFwiLFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGRyaXZlciwgbnVsbCwgNClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHdvcmRBcnJheVswXSA9PT0gXCJUcmlwXCIpIHtcbiAgICAgIGNvbnN0IHRyaXAgPSBoZWxwZXJzLmNyZWF0ZVRyaXAod29yZEFycmF5LCBkcml2ZXJzKTtcbiAgICAgIHRyaXBzLnB1c2godHJpcCk7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgY2hhbGsubWFnZW50YShcIndlIGhhdmUgYSBuZXcgdHJpcCA9PiBcIiwgSlNPTi5zdHJpbmdpZnkodHJpcCwgbnVsbCwgNCkpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZChcInVua25vd24gZXJyb3JcIikpO1xuICAgIH1cbiAgfSk7XG5cbiAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZChcIlRoZXJlIHdhcyBhbiBlcnJvciByZWFkaW5nIHRoZSBmaWxlID0+IFwiLCBlcnJvcikpO1xuICB9KTtcblxuICBzdHJlYW0ub24oXCJlbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgZHJpdmVyUmVwb3J0TWFwID0gaGVscGVycy5idWlsZERyaXZlclJlcG9ydE1hcCh0cmlwcyk7XG4gICAgaGVscGVycy53cml0ZVJlc3VsdEZpbGUoZHJpdmVyUmVwb3J0TWFwLCBkcml2ZXJzKTtcbiAgfSk7XG59XG5cbnJ1bigpO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "program",
        "require",
        "chalk",
        "csv",
        "_",
        "fs",
        "helpers",
        "file",
        "process",
        "argv",
        "version",
        "option",
        "parse",
        "run",
        "drivers",
        "trips",
        "stream",
        "createReadStream",
        "pipe",
        "delimiter",
        "on",
        "data",
        "line",
        "wordArray",
        "split",
        "driver",
        "createDriver",
        "push",
        "console",
        "log",
        "magenta",
        "JSON",
        "stringify",
        "trip",
        "createTrip",
        "error",
        "red",
        "driverReportMap",
        "buildDriverReportMap",
        "writeResultFile"
      ],
      "mappings": ";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAMG,CAAC,GAAGH,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAMI,EAAE,GAAGJ,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAMK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMM,IAAI,GAAGC,OAAO,CAACC,IAAR,CAAa,CAAb,CAAb;AAEAT,OAAO,CACJU,OADH,CACW,OADX,EAEGC,MAFH,CAEU,mBAFV,EAE+B,mCAF/B,EAGGC,KAHH,CAGSJ,OAAO,CAACC,IAHjB;;AAKA,SAASI,GAAT,GAAe;AACb,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,KAAK,GAAG,EAAd;AAEA,MAAIH,KAAK,GAAGT,GAAG,CAACS,KAAhB;AACA,MAAII,MAAM,GAAGX,EAAE,CAACY,gBAAH,CAAoBV,IAApB,EAA0BW,IAA1B,CAA+BN,KAAK,CAAC;AAAEO,IAAAA,SAAS,EAAE;AAAb,GAAD,CAApC,CAAb;AAEAH,EAAAA,MAAM,CAACI,EAAP,CAAU,MAAV,EAAkB,UAASC,IAAT,EAAe;AAC/B,QAAIC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAf;AACA,QAAIE,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAhB;;AACA,QAAID,SAAS,CAAC,CAAD,CAAT,KAAiB,QAArB,EAA+B;AAC7B,UAAME,MAAM,GAAGnB,OAAO,CAACoB,YAAR,CAAqBH,SAArB,CAAf;AACAT,MAAAA,OAAO,CAACa,IAAR,CAAaF,MAAb;AACAG,MAAAA,OAAO,CAACC,GAAR,CACE3B,KAAK,CAAC4B,OAAN,CACE,0BADF,EAEEC,IAAI,CAACC,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAFF,CADF;AAMD,KATD,MASO,IAAIF,SAAS,CAAC,CAAD,CAAT,KAAiB,MAArB,EAA6B;AAClC,UAAMU,IAAI,GAAG3B,OAAO,CAAC4B,UAAR,CAAmBX,SAAnB,EAA8BT,OAA9B,CAAb;AACAC,MAAAA,KAAK,CAACY,IAAN,CAAWM,IAAX;AACAL,MAAAA,OAAO,CAACC,GAAR,CACE3B,KAAK,CAAC4B,OAAN,CAAc,wBAAd,EAAwCC,IAAI,CAACC,SAAL,CAAeC,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAxC,CADF;AAGD,KANM,MAMA;AACLL,MAAAA,OAAO,CAACO,KAAR,CAAcjC,KAAK,CAACkC,GAAN,CAAU,eAAV,CAAd;AACD;AACF,GArBD;AAuBApB,EAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,UAASe,KAAT,EAAgB;AACjCP,IAAAA,OAAO,CAACO,KAAR,CAAcjC,KAAK,CAACkC,GAAN,CAAU,yCAAV,EAAqDD,KAArD,CAAd;AACD,GAFD;AAIAnB,EAAAA,MAAM,CAACI,EAAP,CAAU,KAAV,EAAiB,YAAW;AAC1B,QAAMiB,eAAe,GAAG/B,OAAO,CAACgC,oBAAR,CAA6BvB,KAA7B,CAAxB;AACAT,IAAAA,OAAO,CAACiC,eAAR,CAAwBF,eAAxB,EAAyCvB,OAAzC;AACD,GAHD;AAID;;AAEDD,GAAG",
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips",
      "sourcesContent": [
        "const program = require(\"commander\");\nconst chalk = require(\"chalk\");\nconst csv = require(\"csv\");\nconst _ = require(\"lodash\");\n\nconst fs = require(\"fs\");\n\nconst helpers = require(\"./helpers\");\nconst file = process.argv[2];\n\nprogram\n  .version(\"0.0.1\")\n  .option(\"-l, --list [list]\", \"list of drivers/trips in txt file\")\n  .parse(process.argv);\n\nfunction run() {\n  const drivers = [];\n  const trips = [];\n\n  let parse = csv.parse;\n  let stream = fs.createReadStream(file).pipe(parse({ delimiter: \"\\n\" }));\n\n  stream.on(\"data\", function(data) {\n    let line = data[0];\n    let wordArray = line.split(\" \");\n    if (wordArray[0] === \"Driver\") {\n      const driver = helpers.createDriver(wordArray);\n      drivers.push(driver);\n      console.log(\n        chalk.magenta(\n          \"we have a new driver => \",\n          JSON.stringify(driver, null, 4)\n        )\n      );\n    } else if (wordArray[0] === \"Trip\") {\n      const trip = helpers.createTrip(wordArray, drivers);\n      trips.push(trip);\n      console.log(\n        chalk.magenta(\"we have a new trip => \", JSON.stringify(trip, null, 4))\n      );\n    } else {\n      console.error(chalk.red(\"unknown error\"));\n    }\n  });\n\n  stream.on(\"error\", function(error) {\n    console.error(chalk.red(\"There was an error reading the file => \", error));\n  });\n\n  stream.on(\"end\", function() {\n    const driverReportMap = helpers.buildDriverReportMap(trips);\n    helpers.writeResultFile(driverReportMap, drivers);\n  });\n}\n\nrun();\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1566885559554
  },
  "{\"sourceRoot\":\"/Users/alexglaze/git/node_fun/root-trips\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexglaze/git/node_fun/root-trips\",\"filename\":\"/Users/alexglaze/git/node_fun/root-trips/helpers.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexglaze/git/node_fun/root-trips\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexglaze/git/node_fun/root-trips",
      "filename": "/Users/alexglaze/git/node_fun/root-trips/helpers.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexglaze/git/node_fun/root-trips",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexglaze/git/node_fun/root-trips/helpers.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexglaze/git/node_fun/root-trips/helpers.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips",
        "sourceFileName": "helpers.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar fs = require(\"fs\");\n\nvar _ = require(\"lodash\");\n\nvar Models = require(\"./models/Models\");\n\nfunction createDriver(wordArray) {\n  var name = wordArray[1];\n  var driver = new Models.Driver(name);\n  return driver;\n}\n\nfunction createTrip(wordArray, drivers) {\n  var driver = drivers.filter(function (driver) {\n    return driver.name === wordArray[1];\n  })[0];\n  var startTime = wordArray[2];\n  var stopTime = wordArray[3];\n  var milesDriven = wordArray[4];\n  var trip = new Models.Trip(driver, startTime, stopTime, milesDriven);\n  return trip;\n}\n\nfunction filterTrips(trips) {\n  return trips.filter(function (trip) {\n    var timeStartArray = trip.startTime.split(':');\n    var timeStopArray = trip.stopTime.split(':');\n    trip.timeInMinutes = getTripTimeInMinutes(timeStartArray, timeStopArray);\n    var tripTimeInHours = getTripTimeInHours(timeStartArray, timeStopArray);\n    var mph = trip.milesDriven / tripTimeInHours;\n    return mph >= 5 && mph <= 100;\n  });\n}\n\nfunction getTripTimeInMinutes(timeStartArray, timeStopArray) {\n  return 60 * parseInt(timeStopArray[0]) + parseInt(timeStopArray[1]) - (60 * parseInt(timeStartArray[0]) + parseInt(timeStartArray[1]));\n}\n\nfunction getTripTimeInHours(timeStartArray, timeStopArray) {\n  var tripTimeInMinutes = 60 * parseInt(timeStopArray[0]) + parseInt(timeStopArray[1]) - (60 * parseInt(timeStartArray[0]) + parseInt(timeStartArray[1]));\n  return tripTimeInMinutes / 60;\n}\n\nfunction buildDriverReportMap(trips) {\n  var driverReportMap = {};\n  var filteredTrips = filterTrips(trips);\n  filteredTrips.map(function (trip) {\n    if (!driverReportMap.hasOwnProperty(trip.driver.name)) {\n      driverReportMap[trip.driver.name] = {\n        totalMiles: 0,\n        totalTime: 0\n      };\n    }\n\n    driverReportMap[trip.driver.name].totalMiles += Math.round(parseFloat(trip.milesDriven));\n    driverReportMap[trip.driver.name].totalTime += trip.timeInMinutes;\n  });\n\n  for (var name in driverReportMap) {\n    var mph = driverReportMap[name].totalMiles / (driverReportMap[name].totalTime / 60);\n    driverReportMap[name].mph = Math.round(mph);\n    driverReportMap[name].name = name;\n  }\n\n  return driverReportMap;\n}\n\nfunction writeResultFile(finalReport, drivers) {\n  var wstream = fs.createWriteStream(\"myOutput.txt\");\n\n  _.each(finalReport, function (driverReport) {\n    wstream.write(\"\".concat(driverReport.name, \": \").concat(driverReport.totalMiles, \" miles @ \").concat(driverReport.mph, \" mph\\n\"));\n  }); // write 0 miles for drivers without trips\n\n\n  drivers.map(function (driver) {\n    if (!finalReport.hasOwnProperty(driver.name)) {\n      wstream.write(\"\".concat(driver.name, \": 0 miles\\n\"));\n    }\n  });\n  wstream.end();\n}\n\nmodule.exports = {\n  createDriver: createDriver,\n  createTrip: createTrip,\n  filterTrips: filterTrips,\n  buildDriverReportMap: buildDriverReportMap,\n  writeResultFile: writeResultFile\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "helpers.js"
      ],
      "names": [
        "fs",
        "require",
        "_",
        "Models",
        "createDriver",
        "wordArray",
        "name",
        "driver",
        "Driver",
        "createTrip",
        "drivers",
        "filter",
        "startTime",
        "stopTime",
        "milesDriven",
        "trip",
        "Trip",
        "filterTrips",
        "trips",
        "timeStartArray",
        "split",
        "timeStopArray",
        "timeInMinutes",
        "getTripTimeInMinutes",
        "tripTimeInHours",
        "getTripTimeInHours",
        "mph",
        "parseInt",
        "tripTimeInMinutes",
        "buildDriverReportMap",
        "driverReportMap",
        "filteredTrips",
        "map",
        "hasOwnProperty",
        "totalMiles",
        "totalTime",
        "Math",
        "round",
        "parseFloat",
        "writeResultFile",
        "finalReport",
        "wstream",
        "createWriteStream",
        "each",
        "driverReport",
        "write",
        "end",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAME,MAAM,GAAGF,OAAO,CAAC,iBAAD,CAAtB;;AAEA,SAASG,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B,MAAMC,IAAI,GAAGD,SAAS,CAAC,CAAD,CAAtB;AACA,MAAME,MAAM,GAAG,IAAIJ,MAAM,CAACK,MAAX,CAAkBF,IAAlB,CAAf;AAEA,SAAOC,MAAP;AACD;;AAED,SAASE,UAAT,CAAoBJ,SAApB,EAA+BK,OAA/B,EAAwC;AACtC,MAAMH,MAAM,GAAGG,OAAO,CAACC,MAAR,CAAe,UAAAJ,MAAM;AAAA,WAAIA,MAAM,CAACD,IAAP,KAAgBD,SAAS,CAAC,CAAD,CAA7B;AAAA,GAArB,EAAuD,CAAvD,CAAf;AACA,MAAMO,SAAS,GAAGP,SAAS,CAAC,CAAD,CAA3B;AACA,MAAMQ,QAAQ,GAAGR,SAAS,CAAC,CAAD,CAA1B;AACA,MAAMS,WAAW,GAAGT,SAAS,CAAC,CAAD,CAA7B;AAEA,MAAMU,IAAI,GAAG,IAAIZ,MAAM,CAACa,IAAX,CAAgBT,MAAhB,EAAwBK,SAAxB,EAAmCC,QAAnC,EAA6CC,WAA7C,CAAb;AAEA,SAAOC,IAAP;AACD;;AAED,SAASE,WAAT,CAAqBC,KAArB,EAA4B;AAExB,SAAOA,KAAK,CAACP,MAAN,CAAa,UAAAI,IAAI,EAAI;AACxB,QAAII,cAAc,GAAGJ,IAAI,CAACH,SAAL,CAAeQ,KAAf,CAAqB,GAArB,CAArB;AACA,QAAIC,aAAa,GAAGN,IAAI,CAACF,QAAL,CAAcO,KAAd,CAAoB,GAApB,CAApB;AAEAL,IAAAA,IAAI,CAACO,aAAL,GAAqBC,oBAAoB,CAACJ,cAAD,EAAiBE,aAAjB,CAAzC;AAEA,QAAMG,eAAe,GAAGC,kBAAkB,CAACN,cAAD,EAAiBE,aAAjB,CAA1C;AAEA,QAAMK,GAAG,GAAGX,IAAI,CAACD,WAAL,GAAmBU,eAA/B;AAEA,WAAOE,GAAG,IAAI,CAAP,IAAYA,GAAG,IAAI,GAA1B;AACH,GAXM,CAAP;AAYH;;AAED,SAASH,oBAAT,CAA8BJ,cAA9B,EAA8CE,aAA9C,EAA6D;AACzD,SAAS,KAAKM,QAAQ,CAACN,aAAa,CAAC,CAAD,CAAd,CAAd,GAAoCM,QAAQ,CAACN,aAAa,CAAC,CAAD,CAAd,CAA7C,IAAqE,KAAKM,QAAQ,CAACR,cAAc,CAAC,CAAD,CAAf,CAAd,GAAqCQ,QAAQ,CAACR,cAAc,CAAC,CAAD,CAAf,CAAjH,CAAP;AACH;;AAED,SAASM,kBAAT,CAA4BN,cAA5B,EAA4CE,aAA5C,EAA2D;AACpD,MAAMO,iBAAiB,GAAK,KAAKD,QAAQ,CAACN,aAAa,CAAC,CAAD,CAAd,CAAd,GAAoCM,QAAQ,CAACN,aAAa,CAAC,CAAD,CAAd,CAA7C,IAAqE,KAAKM,QAAQ,CAACR,cAAc,CAAC,CAAD,CAAf,CAAd,GAAqCQ,QAAQ,CAACR,cAAc,CAAC,CAAD,CAAf,CAAjH,CAA1B;AACA,SAAOS,iBAAiB,GAAG,EAA3B;AACN;;AAED,SAASC,oBAAT,CAA8BX,KAA9B,EAAqC;AACnC,MAAMY,eAAe,GAAG,EAAxB;AAEA,MAAMC,aAAa,GAAGd,WAAW,CAACC,KAAD,CAAjC;AAEAa,EAAAA,aAAa,CAACC,GAAd,CAAkB,UAAAjB,IAAI,EAAI;AACxB,QAAI,CAACe,eAAe,CAACG,cAAhB,CAA+BlB,IAAI,CAACR,MAAL,CAAYD,IAA3C,CAAL,EAAuD;AACrDwB,MAAAA,eAAe,CAACf,IAAI,CAACR,MAAL,CAAYD,IAAb,CAAf,GAAoC;AAClC4B,QAAAA,UAAU,EAAE,CADsB;AAElCC,QAAAA,SAAS,EAAE;AAFuB,OAApC;AAID;;AACDL,IAAAA,eAAe,CAACf,IAAI,CAACR,MAAL,CAAYD,IAAb,CAAf,CAAkC4B,UAAlC,IAAgDE,IAAI,CAACC,KAAL,CAC9CC,UAAU,CAACvB,IAAI,CAACD,WAAN,CADoC,CAAhD;AAGAgB,IAAAA,eAAe,CAACf,IAAI,CAACR,MAAL,CAAYD,IAAb,CAAf,CAAkC6B,SAAlC,IAA+CpB,IAAI,CAACO,aAApD;AACD,GAXD;;AAaA,OAAK,IAAMhB,IAAX,IAAmBwB,eAAnB,EAAoC;AAClC,QAAMJ,GAAG,GACPI,eAAe,CAACxB,IAAD,CAAf,CAAsB4B,UAAtB,IAAoCJ,eAAe,CAACxB,IAAD,CAAf,CAAsB6B,SAAtB,GAAkC,EAAtE,CADF;AAEAL,IAAAA,eAAe,CAACxB,IAAD,CAAf,CAAsBoB,GAAtB,GAA4BU,IAAI,CAACC,KAAL,CAAWX,GAAX,CAA5B;AACAI,IAAAA,eAAe,CAACxB,IAAD,CAAf,CAAsBA,IAAtB,GAA6BA,IAA7B;AACD;;AAED,SAAOwB,eAAP;AACD;;AAED,SAASS,eAAT,CAAyBC,WAAzB,EAAsC9B,OAAtC,EAA+C;AAC7C,MAAI+B,OAAO,GAAGzC,EAAE,CAAC0C,iBAAH,CAAqB,cAArB,CAAd;;AAEAxC,EAAAA,CAAC,CAACyC,IAAF,CAAOH,WAAP,EAAoB,UAASI,YAAT,EAAuB;AACzCH,IAAAA,OAAO,CAACI,KAAR,WACKD,YAAY,CAACtC,IADlB,eAC2BsC,YAAY,CAACV,UADxC,sBAC8DU,YAAY,CAAClB,GAD3E;AAGD,GAJD,EAH6C,CAS7C;;;AACAhB,EAAAA,OAAO,CAACsB,GAAR,CAAY,UAAAzB,MAAM,EAAI;AACpB,QAAI,CAACiC,WAAW,CAACP,cAAZ,CAA2B1B,MAAM,CAACD,IAAlC,CAAL,EAA8C;AAC5CmC,MAAAA,OAAO,CAACI,KAAR,WAAiBtC,MAAM,CAACD,IAAxB;AACD;AACF,GAJD;AAKAmC,EAAAA,OAAO,CAACK,GAAR;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACf5C,EAAAA,YAAY,EAAZA,YADe;AAEfK,EAAAA,UAAU,EAAVA,UAFe;AAGfQ,EAAAA,WAAW,EAAXA,WAHe;AAIfY,EAAAA,oBAAoB,EAApBA,oBAJe;AAKfU,EAAAA,eAAe,EAAfA;AALe,CAAjB",
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips",
      "sourcesContent": [
        "const fs = require(\"fs\");\nconst _ = require(\"lodash\");\n\nconst Models = require(\"./models/Models\");\n\nfunction createDriver(wordArray) {\n  const name = wordArray[1];\n  const driver = new Models.Driver(name);\n\n  return driver;\n}\n\nfunction createTrip(wordArray, drivers) {\n  const driver = drivers.filter(driver => driver.name === wordArray[1])[0];\n  const startTime = wordArray[2];\n  const stopTime = wordArray[3];\n  const milesDriven = wordArray[4];\n\n  const trip = new Models.Trip(driver, startTime, stopTime, milesDriven);\n\n  return trip;\n}\n\nfunction filterTrips(trips) {\n\n    return trips.filter(trip => {\n        let timeStartArray = trip.startTime.split(':');\n        let timeStopArray = trip.stopTime.split(':');\n\n        trip.timeInMinutes = getTripTimeInMinutes(timeStartArray, timeStopArray);\n\n        const tripTimeInHours = getTripTimeInHours(timeStartArray, timeStopArray);\n        \n        const mph = trip.milesDriven / tripTimeInHours;\n        \n        return mph >= 5 && mph <= 100;\n    });\n}\n\nfunction getTripTimeInMinutes(timeStartArray, timeStopArray) {\n    return ((60 * parseInt(timeStopArray[0])) + parseInt(timeStopArray[1])) - ((60 * parseInt(timeStartArray[0])) + parseInt(timeStartArray[1]));\n}\n\nfunction getTripTimeInHours(timeStartArray, timeStopArray) {\n       const tripTimeInMinutes = ((60 * parseInt(timeStopArray[0])) + parseInt(timeStopArray[1])) - ((60 * parseInt(timeStartArray[0])) + parseInt(timeStartArray[1]));\n       return tripTimeInMinutes / 60;\n}\n\nfunction buildDriverReportMap(trips) {\n  const driverReportMap = {};\n\n  const filteredTrips = filterTrips(trips);\n\n  filteredTrips.map(trip => {\n    if (!driverReportMap.hasOwnProperty(trip.driver.name)) {\n      driverReportMap[trip.driver.name] = {\n        totalMiles: 0,\n        totalTime: 0\n      };\n    }\n    driverReportMap[trip.driver.name].totalMiles += Math.round(\n      parseFloat(trip.milesDriven)\n    );\n    driverReportMap[trip.driver.name].totalTime += trip.timeInMinutes;\n  });\n\n  for (const name in driverReportMap) {\n    const mph =\n      driverReportMap[name].totalMiles / (driverReportMap[name].totalTime / 60);\n    driverReportMap[name].mph = Math.round(mph);\n    driverReportMap[name].name = name;\n  }\n\n  return driverReportMap;\n}\n\nfunction writeResultFile(finalReport, drivers) {\n  var wstream = fs.createWriteStream(\"myOutput.txt\");\n\n  _.each(finalReport, function(driverReport) {\n    wstream.write(\n      `${driverReport.name}: ${driverReport.totalMiles} miles @ ${driverReport.mph} mph\\n`\n    );\n  });\n\n  // write 0 miles for drivers without trips\n  drivers.map(driver => {\n    if (!finalReport.hasOwnProperty(driver.name)) {\n      wstream.write(`${driver.name}: 0 miles\\n`);\n    }\n  });\n  wstream.end();\n}\n\nmodule.exports = {\n  createDriver,\n  createTrip,\n  filterTrips,\n  buildDriverReportMap,\n  writeResultFile\n};\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1566885548133
  },
  "{\"sourceRoot\":\"/Users/alexglaze/git/node_fun/root-trips/models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexglaze/git/node_fun/root-trips\",\"filename\":\"/Users/alexglaze/git/node_fun/root-trips/models/Models.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexglaze/git/node_fun/root-trips\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexglaze/git/node_fun/root-trips",
      "filename": "/Users/alexglaze/git/node_fun/root-trips/models/Models.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexglaze/git/node_fun/root-trips",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexglaze/git/node_fun/root-trips/models/Models.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexglaze/git/node_fun/root-trips/models/Models.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
        "sourceFileName": "Models.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar Driver = require('./Driver');\n\nvar Trip = require('./Trip');\n\nvar Models = {\n  Trip: Trip,\n  Driver: Driver\n};\nmodule.exports = Models;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1vZGVscy5qcyJdLCJuYW1lcyI6WyJEcml2ZXIiLCJyZXF1aXJlIiwiVHJpcCIsIk1vZGVscyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUVBLElBQU1FLE1BQU0sR0FBRztBQUNYRCxFQUFBQSxJQUFJLEVBQUpBLElBRFc7QUFFWEYsRUFBQUEsTUFBTSxFQUFOQTtBQUZXLENBQWY7QUFLQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixNQUFqQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWxleGdsYXplL2dpdC9ub2RlX2Z1bi9yb290LXRyaXBzL21vZGVscyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERyaXZlciA9IHJlcXVpcmUoJy4vRHJpdmVyJyk7XG5jb25zdCBUcmlwID0gcmVxdWlyZSgnLi9UcmlwJyk7XG5cbmNvbnN0IE1vZGVscyA9IHtcbiAgICBUcmlwLFxuICAgIERyaXZlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RlbHM7Il19",
    "map": {
      "version": 3,
      "sources": [
        "Models.js"
      ],
      "names": [
        "Driver",
        "require",
        "Trip",
        "Models",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAME,MAAM,GAAG;AACXD,EAAAA,IAAI,EAAJA,IADW;AAEXF,EAAAA,MAAM,EAANA;AAFW,CAAf;AAKAI,MAAM,CAACC,OAAP,GAAiBF,MAAjB",
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
      "sourcesContent": [
        "const Driver = require('./Driver');\nconst Trip = require('./Trip');\n\nconst Models = {\n    Trip,\n    Driver\n};\n\nmodule.exports = Models;"
      ]
    },
    "sourceType": "script",
    "mtime": 1566785421336
  },
  "{\"sourceRoot\":\"/Users/alexglaze/git/node_fun/root-trips/models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexglaze/git/node_fun/root-trips\",\"filename\":\"/Users/alexglaze/git/node_fun/root-trips/models/Driver.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexglaze/git/node_fun/root-trips\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexglaze/git/node_fun/root-trips",
      "filename": "/Users/alexglaze/git/node_fun/root-trips/models/Driver.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexglaze/git/node_fun/root-trips",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexglaze/git/node_fun/root-trips/models/Driver.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexglaze/git/node_fun/root-trips/models/Driver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
        "sourceFileName": "Driver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// name\nvar Driver = function Driver(name) {\n  _classCallCheck(this, Driver);\n\n  this.name = name;\n};\n\nmodule.exports = Driver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRyaXZlci5qcyJdLCJuYW1lcyI6WyJEcml2ZXIiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0lBQ01BLE0sR0FDRixnQkFBWUMsSUFBWixFQUFrQjtBQUFBOztBQUNkLE9BQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNILEM7O0FBR0xDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsTUFBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FsZXhnbGF6ZS9naXQvbm9kZV9mdW4vcm9vdC10cmlwcy9tb2RlbHMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lXG5jbGFzcyBEcml2ZXIge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRHJpdmVyOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "Driver.js"
      ],
      "names": [
        "Driver",
        "name",
        "module",
        "exports"
      ],
      "mappings": ";;;;AAAA;IACMA,M,GACF,gBAAYC,IAAZ,EAAkB;AAAA;;AACd,OAAKA,IAAL,GAAYA,IAAZ;AACH,C;;AAGLC,MAAM,CAACC,OAAP,GAAiBH,MAAjB",
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
      "sourcesContent": [
        "// name\nclass Driver {\n    constructor(name) {\n        this.name = name;\n    }\n}\n\nmodule.exports = Driver;"
      ]
    },
    "sourceType": "script",
    "mtime": 1566784684605
  },
  "{\"sourceRoot\":\"/Users/alexglaze/git/node_fun/root-trips/models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexglaze/git/node_fun/root-trips\",\"filename\":\"/Users/alexglaze/git/node_fun/root-trips/models/Trip.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexglaze/git/node_fun/root-trips\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexglaze/git/node_fun/root-trips",
      "filename": "/Users/alexglaze/git/node_fun/root-trips/models/Trip.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexglaze/git/node_fun/root-trips",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexglaze/git/node_fun/root-trips/models/Trip.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexglaze/git/node_fun/root-trips/models/Trip.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
        "sourceFileName": "Trip.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//driver name, start time, stop time, miles driven.\nvar Trip = function Trip(driver, startTime, stopTime, milesDriven) {\n  _classCallCheck(this, Trip);\n\n  this.driver = driver;\n  this.startTime = startTime;\n  this.stopTime = stopTime;\n  this.milesDriven = milesDriven;\n};\n\nmodule.exports = Trip;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyaXAuanMiXSwibmFtZXMiOlsiVHJpcCIsImRyaXZlciIsInN0YXJ0VGltZSIsInN0b3BUaW1lIiwibWlsZXNEcml2ZW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7SUFDTUEsSSxHQUNGLGNBQVlDLE1BQVosRUFBb0JDLFNBQXBCLEVBQStCQyxRQUEvQixFQUF5Q0MsV0FBekMsRUFBc0Q7QUFBQTs7QUFDbEQsT0FBS0gsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsT0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxPQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLE9BQUtDLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0gsQzs7QUFHTEMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTixJQUFqQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWxleGdsYXplL2dpdC9ub2RlX2Z1bi9yb290LXRyaXBzL21vZGVscyIsInNvdXJjZXNDb250ZW50IjpbIi8vZHJpdmVyIG5hbWUsIHN0YXJ0IHRpbWUsIHN0b3AgdGltZSwgbWlsZXMgZHJpdmVuLlxuY2xhc3MgVHJpcCB7XG4gICAgY29uc3RydWN0b3IoZHJpdmVyLCBzdGFydFRpbWUsIHN0b3BUaW1lLCBtaWxlc0RyaXZlbikge1xuICAgICAgICB0aGlzLmRyaXZlciA9IGRyaXZlcjtcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBzdGFydFRpbWU7XG4gICAgICAgIHRoaXMuc3RvcFRpbWUgPSBzdG9wVGltZTtcbiAgICAgICAgdGhpcy5taWxlc0RyaXZlbiA9IG1pbGVzRHJpdmVuO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmlwOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "Trip.js"
      ],
      "names": [
        "Trip",
        "driver",
        "startTime",
        "stopTime",
        "milesDriven",
        "module",
        "exports"
      ],
      "mappings": ";;;;AAAA;IACMA,I,GACF,cAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,WAAzC,EAAsD;AAAA;;AAClD,OAAKH,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACH,C;;AAGLC,MAAM,CAACC,OAAP,GAAiBN,IAAjB",
      "sourceRoot": "/Users/alexglaze/git/node_fun/root-trips/models",
      "sourcesContent": [
        "//driver name, start time, stop time, miles driven.\nclass Trip {\n    constructor(driver, startTime, stopTime, milesDriven) {\n        this.driver = driver;\n        this.startTime = startTime;\n        this.stopTime = stopTime;\n        this.milesDriven = milesDriven;\n    }\n}\n\nmodule.exports = Trip;"
      ]
    },
    "sourceType": "script",
    "mtime": 1566786339592
  }
}